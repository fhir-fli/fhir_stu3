// ignore_for_file: avoid_print

// Package imports:
import 'package:fhir_stu3/fhir_stu3.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:test/test.dart';
import 'requests_test.mocks.dart'; // Generated by Mockito

@GenerateMocks(<Type>[FhirRequest])
Future<void> requestsTest() async {
  // Ensure to initialize the mockito code generation
  setUpAll(() {
    // This is required for Mockito code generation
    // Mockito will have generated a `MockFhirRequest` class
  });

  group('FhirRequest - READ:', () {
    test('get patient', () async {
      // Create an instance of your MockFhirRequest
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      // Prepare a mocked response
      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
            ),
          ),
        ],
      );

      // Setup mock to return the specific mocked response when the request method is called
      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      // Use the mock to perform the request
      final OperationOutcome? response = await mockFhirRequest.request(
        headers: <String, String>{'test': 'headers'},
      ) as OperationOutcome?;

      // Perform your expectations
      expect(
        response?.issue[0].details?.text,
        equals(
            'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false'),
      );
    });

    test('get patient with pretty', () async {
      // Setup mock for the specific scenario
      final MockFhirRequest mockFhirRequest = MockFhirRequest();
      const OperationOutcome mockedOutcomePretty = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=true',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcomePretty);

      // Use the mock to perform the request
      final OperationOutcome? response = await mockFhirRequest.request(
        headers: <String, String>{'test': 'headers'},
      ) as OperationOutcome?;

      // Perform your expectations
      expect(
        response?.issue[0].details?.text,
        equals(
            'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=true'),
      );
    });

    test('get patient with pretty and summary true', () async {
      // Initialize your mock
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      // Prepare a mocked response for the specific test case
      const OperationOutcome mockedOutcomePrettyAndSummaryTrue =
          OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=true&_summary=true',
            ),
          ),
        ],
      );

      // Setup mock to return the specific mocked response when the request method is called
      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcomePrettyAndSummaryTrue);

      // Use the mock to perform the request
      final OperationOutcome? response = await mockFhirRequest.request(
        headers: <String, String>{'test': 'headers'},
      ) as OperationOutcome?;

      // Perform your expectations
      expect(
        response?.issue[0].details?.text,
        equals(
            'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=true&_summary=true'),
      );
    });

    test('get patient with summary count', () async {
      // Initialize the MockFhirRequest
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      // Prepare the mocked OperationOutcome for this specific scenario
      const OperationOutcome mockedOutcomeSummaryCount = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false&_summary=count',
            ),
          ),
        ],
      );

      // Setup the mock to return the mocked response for the request method
      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcomeSummaryCount);

      // Use the mock to perform the request
      final OperationOutcome? response = await mockFhirRequest.request(
        headers: <String, String>{'test': 'headers'},
      ) as OperationOutcome?;

      // Assertions to validate the expected behavior
      expect(
        response?.issue[0].details?.text,
        equals(
            'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false&_summary=count'),
      );
    });

    test('get patient with pretty, only want to return name', () async {
      // Initialize the MockFhirRequest
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      // Prepare the mocked OperationOutcome for this specific scenario
      const OperationOutcome mockedOutcomePrettyWithNameOnly = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/1227442?_format=json&_pretty=true&_elements=name',
            ),
          ),
        ],
      );

      // Setup the mock to return the mocked response for the request method
      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcomePrettyWithNameOnly);

      // Use the mock to perform the request
      final OperationOutcome? response = await mockFhirRequest.request(
        headers: <String, String>{'test': 'headers'},
      ) as OperationOutcome?;

      // Assertions to validate the expected behavior
      expect(
        response?.issue[0].details?.text,
        equals(
            'http://hapi.fhir.org/baseStu3/Patient/1227442?_format=json&_pretty=true&_elements=name'),
      );
    });

    test('get patient with pretty, only want to return name and gender',
        () async {
      // Initialize the MockFhirRequest
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      // Prepare the mocked OperationOutcome for this specific scenario
      const OperationOutcome mockedOutcomePrettyWithNameAndGender =
          OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/1227442?_format=json&_pretty=true&_elements=name,gender',
            ),
          ),
        ],
      );

      // Setup the mock to return the mocked response for the request method
      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcomePrettyWithNameAndGender);

      // Use the mock to perform the request
      final OperationOutcome? response = await mockFhirRequest.request(
        headers: <String, String>{'test': 'headers'},
      ) as OperationOutcome?;

      // Assertions to validate the expected behavior
      expect(
        response?.issue[0].details?.text,
        equals(
            'http://hapi.fhir.org/baseStu3/Patient/1227442?_format=json&_pretty=true&_elements=name,gender'),
      );
    }, tags: <String>['uri', 'read']);

    group('FhirRequest - VREAD:', () {
      test('get patient version', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=false',
        );
      });

      test('get patient version with pretty', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=true',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=true',
        );
      });

      test('get patient version with pretty and summary true', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=true&_summary=true',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=true&_summary=true',
        );
      });

      test('get patient version with summary count', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=false&_summary=count',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345/_history/6789?_format=json&_pretty=false&_summary=count',
        );
      });
    }, tags: <String>['uri', 'vread']);

    group('FhirRequest - TRANSACTION:', () {
      test('transaction/batch', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3?_format=json&_pretty=false',
        );
      });

      test('batch with error in bundle', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        // Assuming `request` method throws a FormatException for the error scenario
        when(mockFhirRequest.request(headers: anyNamed('headers'))).thenThrow(
            const FormatException(
                'Each bundle entry request needs a method type specified, but at least one entry in this bundle is missing a method'));

        expect(
          () async => mockFhirRequest
              .request(headers: <String, String>{'test': 'header'}),
          throwsA(isA<FormatException>()),
        );
      });
    }, tags: <String>['uri', 'transaction']);

    group('FhirRequest - HISTORY:', () {
      test('observation history by type and id', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Observation/12345/_history?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Observation/12345/_history?_format=json&_pretty=false',
        );
      });

      test('observation history by type', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Observation/_history?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Observation/_history?_format=json&_pretty=false',
        );
      });

      test('history for everything', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/_history?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/_history?_format=json&_pretty=false',
        );
      });

      test(
          'history resource by type and id, count of 10, after a specified date',
          () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Observation/12345/_history?_format=json&_pretty=false&_count=10&_since=2020-10-08T16:58:07.241117Z',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Observation/12345/_history?_format=json&_pretty=false&_count=10&_since=2020-10-08T16:58:07.241117Z',
        );
      });

      test(
          'search all history, count = 10, since 2020-10-08, and only those that are included in the List/12345',
          () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/_history?_format=json&_pretty=false&_list=List/12345&_count=10&_since=2020-10-08',
              ),
            ),
          ],
        );

        // Setup the mock to return the specified mocked response when the request method is called
        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        // Perform the mock request with specified headers
        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        // Assertions to verify the expected outcome
        expect(
          response?.issue.first.details?.text,
          equals(
              'http://hapi.fhir.org/baseStu3/_history?_format=json&_pretty=false&_list=List/12345&_count=10&_since=2020-10-08'),
        );
      });
    }, tags: <String>['uri', 'history']);

    group('FhirRequest - UPDATE:', () {
      test('update patient by id', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
        );
      });

      test('update patient by id with pretty', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=true',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=true',
        );
      });
    }, tags: <String>['uri', 'update']);

    group('FhirRequest - PATCH:', () {
      test('patch patient by id', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
        );
      });
    }, tags: <String>['uri', 'patch']);

    group('FhirRequest - DELETE:', () {
      test('delete patient', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient/12345?_format=json&_pretty=false',
        );
      });
    }, tags: <String>['uri', 'delete']);

    group('FhirRequest - CREATE:', () {
      test('create patient', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false',
        );
      });
    }, tags: <String>['uri', 'create']);

    group('FhirRequest - CAPABILITIES:', () {
      test('capabilities with mode default', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    'http://hapi.fhir.org/baseStu3/metadata?_format=json&_pretty=false',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          'http://hapi.fhir.org/baseStu3/metadata?_format=json&_pretty=false',
        );
      });
    }, tags: <String>['uri', 'capabilities']);

    group('FhirRequest - OPERATION:', () {
      test('everything operation', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    r'http://hapi.fhir.org/baseStu3/$everything?_format=json&_pretty=false&start=2020-01-01&end=2020-08-01',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          r'http://hapi.fhir.org/baseStu3/$everything?_format=json&_pretty=false&start=2020-01-01&end=2020-08-01',
        );
      });

      test('everything operation for Patient 744742', () async {
        final MockFhirRequest mockFhirRequest = MockFhirRequest();

        const OperationOutcome mockedOutcome = OperationOutcome(
          issue: <OperationOutcomeIssue>[
            OperationOutcomeIssue(
              details: CodeableConcept(
                text:
                    r'http://hapi.fhir.org/baseStu3/Patient/744742/$everything?_format=json&_pretty=false&start=2020-01-01&end=2020-08-01',
              ),
            ),
          ],
        );

        when(mockFhirRequest.request(headers: anyNamed('headers')))
            .thenAnswer((_) async => mockedOutcome);

        final OperationOutcome? response = await mockFhirRequest.request(
            headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

        expect(
          response?.issue.first.details?.text,
          r'http://hapi.fhir.org/baseStu3/Patient/744742/$everything?_format=json&_pretty=false&start=2020-01-01&end=2020-08-01',
        );
      });
    }, tags: <String>['uri', 'operation']);
  }, tags: <String>['uri', 'operation']);

  group('FhirRequest - SEARCH:', () {
    test('patient id search', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_id=12345',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_id=12345',
      );
    });

    test('patient id search using post', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient/_search?_format=json&_pretty=false',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient/_search?_format=json&_pretty=false',
      );
    });

    test('observation time search', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&_lastUpdated=gt2010-10-01',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&_lastUpdated=gt2010-10-01',
      );
    });

    test('condition search, code parameter (_tag)', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Condition?_format=json&_pretty=false&_tag=http://acme.org/codes|needs-review',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Condition?_format=json&_pretty=false&_tag=http://acme.org/codes|needs-review',
      );
    });

    test('diagnostic report rearch, uri parameter (_profile)', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/DiagnosticReport?_format=json&_pretty=false&_profile=http://acme.org/codes',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/DiagnosticReport?_format=json&_pretty=false&_profile=http://acme.org/codes',
      );
    });

    test('patient search if gender present', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&gender:missing=true',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&gender:missing=true',
      );
    });

    test('patient search if gender present', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&gender:missing=false',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&gender:missing=false',
      );
    });

    test('patient search for exact text match', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_text:exact=Stark',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_text:exact=Stark',
      );
    });

    test('patient search for text contains', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_text:contains=Stark',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_text:contains=Stark',
      );
    });

    test('patient search for text contains and exact match', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_text:contains=Stark&_text:exact=Stark',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&_text:contains=Stark&_text:exact=Stark',
      );
    });

    test('patient search for birthday between two dates', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&birthdate=ge2010-01-01&birthdate=le2011-12-31',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&birthdate=ge2010-01-01&birthdate=le2011-12-31',
      );
    });

    test('patient search for given name with parameters', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&given=eve&given:contains=eve&given:exact=eve',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&given=eve&given:contains=eve&given:exact=eve',
      );
    });

    test('patient search with identifier', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&identifier=http://acme.org/patient|2345',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&identifier=http://acme.org/patient|2345',
      );
    });

    test('composition search section code', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Composition?_format=json&_pretty=false&section:not=48765-2',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Composition?_format=json&_pretty=false&section:not=48765-2',
      );
    });

    test('condition search via snomed code', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Condition?_format=json&_pretty=false&code:in=http://snomed.info/sct?fhir_vs=isa/126851005',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Condition?_format=json&_pretty=false&code:in=http://snomed.info/sct?fhir_vs=isa/126851005',
      );
    });

    test('condition search via snomed code, with system and code parameters',
        () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Condition?_format=json&_pretty=false&code:in=http://snomed.info/sct|126851005',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Condition?_format=json&_pretty=false&code:in=http://snomed.info/sct|126851005',
      );
    });

    test('patient search by mr code', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&identifier:of-type=http://terminology.hl7.org/CodeSystem/v2-0203|MR|446053',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Patient?_format=json&_pretty=false&identifier:of-type=http://terminology.hl7.org/CodeSystem/v2-0203|MR|446053',
      );
    });

    test('observation search by quantity, with prefix', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&value-quantity=ap5.4|http://unitsofmeasure.org|mg',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&value-quantity=ap5.4|http://unitsofmeasure.org|mg',
      );
    });

    test('observation search by quantity, without prefix', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&value-quantity=5.4|http://unitsofmeasure.org|mg',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&value-quantity=5.4|http://unitsofmeasure.org|mg',
      );
    });

    test('observation search by quantity, testing number parsing', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&value-quantity=0.0054|http://unitsofmeasure.org|g',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&value-quantity=0.0054|http://unitsofmeasure.org|g',
      );
    });

    test('observation search by reference, using url', () async {
      final MockFhirRequest mockFhirRequest = MockFhirRequest();

      const OperationOutcome mockedOutcome = OperationOutcome(
        issue: <OperationOutcomeIssue>[
          OperationOutcomeIssue(
            details: CodeableConcept(
              text:
                  'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&subject=Patient/123',
            ),
          ),
        ],
      );

      when(mockFhirRequest.request(headers: anyNamed('headers')))
          .thenAnswer((_) async => mockedOutcome);

      final OperationOutcome? response = await mockFhirRequest.request(
          headers: <String, String>{'test': 'headers'}) as OperationOutcome?;

      expect(
        response?.issue.first.details?.text,
        'http://hapi.fhir.org/baseStu3/Observation?_format=json&_pretty=false&subject=Patient/123',
      );
    });
  }, tags: <String>['uri', 'search']);
}
